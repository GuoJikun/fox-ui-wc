{"version":3,"sources":["webpack://ivy-ui/./src/components/button.js","webpack://ivy-ui/./src/components/card.js","webpack://ivy-ui/./src/components/input.js","webpack://ivy-ui/./src/components/switch.js","webpack://ivy-ui/./src/index.js","webpack://ivy-ui/./src/utils/var.js","webpack://ivy-ui/webpack/bootstrap","webpack://ivy-ui/webpack/runtime/define property getters","webpack://ivy-ui/webpack/runtime/hasOwnProperty shorthand","webpack://ivy-ui/webpack/runtime/make namespace object","webpack://ivy-ui/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;AAQyB;;AAEzB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAa;AAC3C,0DAA0D,0DAAe,CAAC;AAC1E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,0DAAe,CAAC;AAC7E,6DAA6D,0DAAe,CAAC;AAC7E;AACA;AACA;AACA,6DAA6D,0DAAe,CAAC;AAC7E,6DAA6D,0DAAe,CAAC;AAC7E;AACA;AACA;AACA,0DAA0D,uDAAY,CAAC;AACvE,0DAA0D,uDAAY,CAAC;AACvE;AACA;AACA;AACA,4DAA4D,wDAAa,CAAC;AAC1E,4DAA4D,wDAAa,CAAC;AAC1E;AACA;AACA;AACA,0DAA0D,uDAAY,CAAC;AACvE,0DAA0D,uDAAY,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kD;AACA;AACA;AACA;AACA,8DAA8D,YAAY,aAAa,kBAAkB;AACzG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;AACA,kDAAkD,WAAW,cAAc,UAAU;AACrF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1LgF;;AAEhF;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wDAAa,CAAC;AAClE;AACA;AACA;AACA,8BAA8B,wDAAa;AAC3C,0DAA0D,0DAAe,CAAC;AAC1E;AACA;AACA,qCAAqC,wDAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC5EyB;;AAEzB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAa;AAC3C;AACA;AACA,qCAAqC,0DAAe;AACpD;AACA;AACA;AACA,oCAAoC,0DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,UAAU,WAAW,WAAW;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7HyB;;AAEzB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0DAAe,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3GgC;AACA;AACF;AACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACH/B;;AAEO;AACA;AACA;AACA;AACA;AACA;AACA;;AAEP;AACO;;AAEP;AACO;;AAEP;AACO;;AAEP;AACO,mCAAmC,oBAAoB;;AAE9D;AACO;;;;;;;UCvBP;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"ivy-ui.js","sourcesContent":["import {\r\n    $_color_primary,\r\n    $_color_success,\r\n    $_color_warn,\r\n    $_color_error,\r\n    $_color_info,\r\n    $_border_base,\r\n    $_border_radius,\r\n} from \"../utils/var.js\";\r\n\r\nclass Button extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        const template = document.createElement(\"template\");\r\n\r\n        template.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    margin-left: 12px;\r\n                    line-height: 32px;\r\n                    display: inline-flex;\r\n                }\r\n                :host(:first-child){\r\n                    margin-left: 0;\r\n                }\r\n\r\n\r\n                .ivy-button {\r\n                    display: block;\r\n                    overflow: hidden;\r\n                    outline: none;\r\n                    height: 34px;\r\n                    line-height: 32px;\r\n                    border: ${$_border_base};\r\n                    border-radius: var(--border-radius, ${$_border_radius});\r\n                    box-sizing: border-box;\r\n                    padding: 0 20px;\r\n                    background: white;\r\n                    cursor: pointer;\r\n                }\r\n\r\n                .ivy-button:not([disabled]):hover,\r\n                .ivy-button:not([disabled]):focus{\r\n                    opacity: 0.8;\r\n                }\r\n\r\n                :host([disabled]) .ivy-button {\r\n                    opacity: 0.7;\r\n                    cursor: not-allowed;\r\n                }\r\n\r\n                .ivy-button-primary {\r\n                    border: 1px solid var(--color-primary, ${$_color_primary});\r\n                    background-color: var(--color-primary, ${$_color_primary});\r\n                    color: white;\r\n                }\r\n                .ivy-button-success {\r\n                    border: 1px solid var(--color-success, ${$_color_success});;\r\n                    background-color: var(--color-success, ${$_color_success});;\r\n                    color: white;\r\n                }\r\n                .ivy-button-warn {\r\n                    border: 1px solid var(--color-warn, ${$_color_warn});;\r\n                    background-color: var(--color-warn, ${$_color_warn});;\r\n                    color: white;\r\n                }\r\n                .ivy-button-danger {\r\n                    border: 1px solid var(--color-danger, ${$_color_error});;\r\n                    background-color: var(--color-danger, ${$_color_error});;\r\n                    color: white;\r\n                }\r\n                .ivy-button-info {\r\n                    border: 1px solid var(--color-info, ${$_color_info});;\r\n                    background-color: var(--color-info, ${$_color_info});;\r\n                    color: white;\r\n                }\r\n                #ivy-loading {\r\n                    width: 1em;\r\n                    height: 1em;\r\n                    vertical-align: -0.15em;\r\n                    fill: currentColor;\r\n                    overflow: hidden;\r\n                    animation: rotate 1.4s linear infinite;\r\n                    display: none;\r\n                }\r\n                @keyframes rotate{\r\n                    to{\r\n                        transform: rotate(360deg); \r\n                    }\r\n                }\r\n            </style>\r\n            <svg aria-hidden=\"true\" style=\"position: absolute; width: 0px; height: 0px; overflow: hidden;\">\r\n                <symbol id=\"ivy-icon-loading\" viewBox=\"0 0 1024 1024\">\r\n                    <path\r\n                        d=\"M512 64q14.016 0 23.008 8.992T544 96v192q0 14.016-8.992 23.008T512 320t-23.008-8.992T480 288V96q0-14.016 8.992-23.008T512 64z m0 640q14.016 0 23.008 8.992T544 736v192q0 14.016-8.992 23.008T512 960t-23.008-8.992T480 928v-192q0-14.016 8.992-23.008T512 704z m448-192q0 14.016-8.992 23.008T928 544h-192q-14.016 0-23.008-8.992T704 512t8.992-23.008T736 480h192q14.016 0 23.008 8.992T960 512z m-640 0q0 14.016-8.992 23.008T288 544H96q-14.016 0-23.008-8.992T64 512t8.992-23.008T96 480h192q14.016 0 23.008 8.992T320 512zM195.008 195.008q10.016-8.992 23.008-8.992t22.016 8.992l136 136q8.992 10.016 8.992 22.496t-9.504 22.016-22.016 9.504-22.496-8.992l-136-136q-8.992-8.992-8.992-22.016t8.992-23.008zM648 648q10.016-10.016 22.496-10.016t22.496 10.016l136 136q8.992 8.992 8.992 22.016t-9.504 22.496-22.496 9.504-22.016-8.992l-136-136q-10.016-10.016-10.016-22.496t10.016-22.496z m180.992-452.992q8.992 10.016 8.992 23.008t-8.992 22.016l-136 136q-10.016 8.992-22.496 8.992t-22.016-9.504-9.504-22.016 8.992-22.496l136-136q8.992-8.992 22.016-8.992t23.008 8.992zM376 648q10.016 10.016 10.016 22.496t-10.016 22.496l-136 136q-8.992 8.992-22.016 8.992t-22.496-9.504-9.504-22.496 8.992-22.016l136-136q10.016-10.016 22.496-10.016t22.496 10.016z\"\r\n                    ></path>\r\n                </symbol>\r\n            </svg>\r\n            \r\n            <button class=\"ivy-button\">\r\n                <svg view=\"0 0 1024 1024\" class=\"ivy-icon\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" aria-hidden=\"true\" id=\"ivy-loading\">\r\n                    <use href=\"#ivy-icon-loading\"></use>\r\n                </svg>\r\n                <span class=\"ivy-button-inner\"><slot></slot></span>\r\n            </button>\r\n        `;\r\n\r\n        this._shadowRoot = this.attachShadow({\r\n            mode: \"open\",\r\n        });\r\n        this._shadowRoot.appendChild(template.content.cloneNode(true));\r\n\r\n        this.$button = this._shadowRoot.querySelector(\"button\");\r\n        this.$loading = this._shadowRoot.querySelector(\"#ivy-loading\");\r\n        this.$buttonInner = this._shadowRoot.querySelector(\".ivy-button-inner\");\r\n\r\n        this.addEventListener(\"click\", e => {});\r\n    }\r\n    connectedCallback() {\r\n        if (this.type && this.$button) {\r\n            this.$button.setAttribute(\"class\", `${this.class} ivy-button-${this.type}`);\r\n        }\r\n    }\r\n\r\n    get type() {\r\n        return this.getAttribute(\"type\");\r\n    }\r\n\r\n    set type(value) {\r\n        this.setAttribute(\"type\", value);\r\n    }\r\n\r\n    get loading() {\r\n        return this.getAttribute(\"loading\");\r\n    }\r\n\r\n    set loading(value) {\r\n        this.setAttribute(\"loading\", value);\r\n    }\r\n\r\n    get round() {\r\n        return this.getAttribute(\"round\");\r\n    }\r\n\r\n    set round(value) {\r\n        this.setAttribute(\"round\", value);\r\n    }\r\n\r\n    get disabled() {\r\n        return this.getAttribute(\"disabled\");\r\n    }\r\n\r\n    set disabled(value) {\r\n        this.setAttribute(\"disabled\", value);\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return [\"type\", \"round\", \"disabled\", \"loading\"];\r\n    }\r\n\r\n    get class() {\r\n        return this.$button.classList;\r\n    }\r\n\r\n    attributeChangedCallback(name, oldVal, newVal) {\r\n        this.render(name);\r\n    }\r\n    render(name) {\r\n        if (name === \"round\") {\r\n            this.$button.style.borderRadius = \"17px\";\r\n        }\r\n        /* if (name === \"disabled\") {\r\n            this.$button.style.cursor = \"not-allowed\";\r\n            this.$button.style.opacity = \"0.5\";\r\n        } */\r\n        if (name === \"loading\") {\r\n            this.$loading.style.display = \"initial\";\r\n            this.$buttonInner.style.marginLeft = \"4px\";\r\n            this.$button.style.cursor = \"not-allowed\";\r\n            this.$button.style.opacity = \"0.5\";\r\n        }\r\n    }\r\n}\r\nif (!customElements.get(\"ivy-button\")) {\r\n    customElements.define(\"ivy-button\", Button);\r\n}\r\n","import { $_border_base, $_border_radius, $_shadow_base } from \"../utils/var.js\";\r\n\r\nclass Card extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        const template = document.createElement(\"template\");\r\n\r\n        template.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    display: inline-block;\r\n                }\r\n                :host([shadow]) .ins-card {\r\n                    box-shadow: var(--box-shadow, ${$_shadow_base});\r\n                    border-color: #eee;\r\n                }\r\n                .ins-card {\r\n                    border: ${$_border_base};\r\n                    border-radius: var(--border-radius, ${$_border_radius});\r\n                }\r\n                .ins-card-header {\r\n                    border-bottom: ${$_border_base};\r\n                    padding: 12px 16px;\r\n                }\r\n                .ins-card-body {\r\n                    padding: 16px;\r\n                }\r\n            </style>\r\n            <div class=\"ins-card\">\r\n                <div class=\"ins-card-header\">\r\n                    <slot name=\"header\" id=\"header\">${this.header}</slot>\r\n                </div>\r\n                <div class=\"ins-card-body\">\r\n                    <slot></slot>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this._shadowRoot = this.attachShadow({\r\n            mode: \"open\",\r\n        });\r\n        this._shadowRoot.appendChild(template.content.cloneNode(true));\r\n\r\n        this.$el = this._shadowRoot.querySelector(\".ins-card\");\r\n        this.$header = this._shadowRoot.querySelector(\".ins-card-header\").children[0];\r\n        console.log(this.$header);\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return [\"shadow\", \"header\"];\r\n    }\r\n\r\n    get shadow() {\r\n        return this.getAttribute(\"shadow\");\r\n    }\r\n\r\n    get header() {\r\n        return this.getAttribute(\"header\") || \"\";\r\n    }\r\n\r\n    set header(value) {\r\n        this.setAttribute(\"header\", value);\r\n    }\r\n\r\n    connectedCallback() {\r\n        /* console.log(this.firstChild, \"this.firstChild\");\r\n        const flag = this.firstElementChild.slot === \"header\";\r\n        if (!flag) {\r\n            this.$el.children[0].children[0].innerHTML = this.header;\r\n        } */\r\n        // this.header = this.haeder;\r\n    }\r\n\r\n    attributeChangedCallback(name, oldVal, val) {\r\n        if (name === \"header\" && this.firstElementChild.slot !== \"header\") {\r\n            const header = val ? val : oldVal;\r\n            this.$header.innerHTML = header;\r\n        }\r\n    }\r\n}\r\n\r\nif (!customElements.get(\"ins-card\")) {\r\n    customElements.define(\"ins-card\", Card);\r\n}\r\n","import {\r\n    $_color_primary,\r\n    $_color_success,\r\n    $_color_warn,\r\n    $_color_error,\r\n    $_color_info,\r\n    $_border_base,\r\n    $_border_radius,\r\n} from \"../utils/var.js\";\r\n\r\nclass Input extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        const template = document.createElement(\"template\");\r\n\r\n        template.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    display: inline-flex;\r\n                    width: 260px;\r\n                    height: 34px;\r\n                }\r\n                :host([disabled=\"true\"]) .ivy-input__inner {\r\n                    cursor: not-allowed;\r\n                }\r\n                .ivy-input {\r\n                    display: flex;\r\n                    height: 34px;\r\n                    line-height: 34px;\r\n                    border-radius: 4px;\r\n                    transition: border-color .3s, background-color .3s;\r\n                    cursor: pointer;\r\n                }\r\n                .ivy-input__append,\r\n                .ivy-input__prepend {\r\n                    background-color: #f5f7fa;\r\n                    color: #909399;\r\n                    vertical-align: middle;\r\n                    position: relative;\r\n                    border: 1px solid #dcdfe6;\r\n                    padding: 0 16px;\r\n                    white-space: nowrap;\r\n                    line-height: 34px;\r\n                    border-radius: 4px 0 0 4px;\r\n                }\r\n                .ivy-input__prepend {\r\n                    border-right: 0;\r\n                }\r\n                .ivy-input__append {\r\n                    border-radius: 0 4px 4px 0;\r\n                    border-left: 0;\r\n                }\r\n                .ivy-input__inner {\r\n                    padding: 0 10px;\r\n                    border: ${$_border_base};\r\n                    border-radius: 0;\r\n                    box-sizing: border-box;\r\n                    outline-color: ${$_color_primary};\r\n                    outline: none;\r\n                }\r\n                .ivy-input__inner:focus {\r\n                    border-color: ${$_color_primary};\r\n                }\r\n            </style>\r\n            <div class=\"ivy-input\">\r\n                <div class=\"ivy-input__prepend\">\r\n                    <slot name=\"prepend\"></slot>\r\n                </div>\r\n                <input class=\"ivy-input__inner\" type=\"${this.type}\" value=\"${this.value}\" />\r\n                <div class=\"ivy-input__append\">\r\n                    <slot name=\"append\"></slot>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        this._shadowRoot = this.attachShadow({\r\n            mode: \"open\",\r\n        });\r\n        this._shadowRoot.appendChild(template.content.cloneNode(true));\r\n\r\n        this.$root = this._shadowRoot.querySelector(\".ivy-input\");\r\n        this.input = this._shadowRoot.querySelector(\".ivy-input__inner\");\r\n        this.input.addEventListener(\"input\", ev => {\r\n            this.value = ev.target.value;\r\n        });\r\n        new CustomEvent(\"input\", ev => {\r\n            ev.detail = this.value;\r\n        });\r\n\r\n        new CustomEvent(\"blur\", ev => {\r\n            ev.detail = this.value;\r\n        });\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return [\"type\", \"value\", \"disabled\"];\r\n    }\r\n\r\n    get type() {\r\n        return this.getAttribute(\"value\") || \"text\";\r\n    }\r\n\r\n    get value() {\r\n        return this.getAttribute(\"value\");\r\n    }\r\n\r\n    set value(value) {\r\n        this.setAttribute(\"value\", value);\r\n    }\r\n\r\n    get disabled() {\r\n        return this.getAttribute(\"disabled\");\r\n    }\r\n\r\n    set disabled(value) {\r\n        this.setAttribute(\"disabled\", value);\r\n    }\r\n\r\n    connectedCallback() {}\r\n\r\n    attributeChangedCallback(name, oldVal, newVal) {\r\n        if (name === \"disabled\" && oldVal !== newVal) {\r\n            if (newVal === \"true\") {\r\n                this.input.setAttribute(\"disabled\", \"disabled\");\r\n            } else {\r\n                this.input.removeAttribute(\"disabled\");\r\n            }\r\n        }\r\n    }\r\n}\r\nif (!customElements.get(\"ivy-input\")) {\r\n    customElements.define(\"ivy-input\", Input);\r\n}\r\n","import {\r\n    $_color_primary,\r\n    $_color_success,\r\n    $_color_warn,\r\n    $_color_error,\r\n    $_color_info,\r\n    $_border_base,\r\n    $_border_radius,\r\n} from \"../utils/var.js\";\r\n\r\nclass Switch extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        const template = document.createElement(\"template\");\r\n\r\n        template.innerHTML = `\r\n            <style>\r\n                :host {\r\n                    display: inline-flex;\r\n                }\r\n\r\n\r\n                .ivy-switch {\r\n                    display: inline-block;\r\n                    position: relative;\r\n                    width: 40px;\r\n                    height: 20px;\r\n                    background: #ccc;\r\n                    border-radius: 10px;\r\n                    transition: border-color .3s, background-color .3s;\r\n                    cursor: pointer;\r\n                }\r\n                .ivy-switch::after{\r\n                    content: '';\r\n                    display: inline-block;\r\n                    width: 1rem;\r\n                    height:1rem;\r\n                    border-radius: 50%;\r\n                    background: #fff;\r\n                    box-shadow: 0, 0, 2px, #999;\r\n                    transition:.4s;\r\n                    top: 2px;\r\n                    position: absolute;\r\n                    left: 2px;\r\n                }\r\n                .ivy-switch.is-checked{\r\n                    background: var(--color-primary, ${$_color_primary});\r\n                }\r\n                .ivy-switch.is-checked::after{\r\n                    content: '';\r\n                    position: absolute;\r\n                    left: 55%;\r\n                    top: 2px;\r\n                }\r\n            </style>\r\n            <span class=\"ivy-switch\"></span>\r\n        `;\r\n\r\n        this._shadowRoot = this.attachShadow({\r\n            mode: \"open\",\r\n        });\r\n        this._shadowRoot.appendChild(template.content.cloneNode(true));\r\n\r\n        this.$switch = this._shadowRoot.querySelector(\".ivy-switch\");\r\n\r\n        this.addEventListener(\"click\", e => {\r\n            this.$switch.classList.toggle(\"is-checked\");\r\n        });\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return [\"checked\", \"disabled\"];\r\n    }\r\n\r\n    get checked() {\r\n        return this.getAttribute(\"checked\");\r\n    }\r\n\r\n    set checked(value) {\r\n        this.setAttribute(\"checked\", value);\r\n    }\r\n\r\n    get disabled() {\r\n        return this.getAttribute(\"disabled\");\r\n    }\r\n\r\n    set disabled(value) {\r\n        this.setAttribute(\"disabled\", value);\r\n    }\r\n\r\n    //   connectedCallback() {\r\n    //     console.log(this.checked, this.checked === \"true\");\r\n    //     if (this.$switch && (this.checked === \"\" || this.checked === \"true\")) {\r\n    //       console.log(this.$switch, \"this.$switch\");\r\n    //       this.$switch.classList.toggle(\"is-checked\");\r\n    //     }\r\n    //   }\r\n\r\n    attributeChangedCallback(name, oldVal, newVal) {\r\n        if (name === \"checked\") {\r\n            this.$switch.classList.toggle(\"is-checked\");\r\n        }\r\n    }\r\n}\r\nif (!customElements.get(\"ivy-switch\")) {\r\n    customElements.define(\"ivy-switch\", Switch);\r\n}\r\n","import \"./components/button.js\";\r\nimport \"./components/switch.js\";\r\nimport \"./components/card.js\";\r\nimport \"./components/input.js\";\r\n","/* 公共颜色变量 */\r\n\r\nexport const $_color_white = \"#ffffff\";\r\nexport const $_color_black = \"#000000\";\r\nexport const $_color_primary = \"#409EFF\";\r\nexport const $_color_success = \"#67C23A\";\r\nexport const $_color_warn = \"#E6A23C\";\r\nexport const $_color_error = \"#F56C6C\";\r\nexport const $_color_info = \"#909399\";\r\n\r\n/****边框颜色 */\r\nexport const $_border_color_base = \"#DCDFE6\";\r\n\r\n/***圆角 */\r\nexport const $_border_radius = \"4px\";\r\n\r\n/*****阴影 */\r\nexport const $_shadow_base = \"0 1px 6px rgba(0,0,0, 0.2)\";\r\n\r\n/*****边框 */\r\nexport const $_border_base = `1px solid ${$_border_color_base}`;\r\n\r\n/*****button组件 */\r\nexport const $_button_border_base = $_border_base;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}